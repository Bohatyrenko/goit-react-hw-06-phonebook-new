{"version":3,"sources":["components/ContactForm/contactForm.module.css","components/App/app.module.css","components/ContactList/contactList.module.css","redux/phoneBook/phonebook-actions.js","redux/phoneBook/phonebook-operations.js","components/ContactForm/ContactForm.js","helpers/filterContacts.js","components/ContactList/ContactList.js","components/ContactList/ContactList.container.js","components/ContactFilter/ContactFilter.js","components/App/App.js","redux/phoneBook/phonebook-reducer.js","redux/store.js","index.js"],"names":["module","exports","addContactRequest","createAction","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","getContactRequest","getContactSuccess","getContactError","filterContact","axios","defaults","baseURL","connect","state","dispatch","addContact","contact","post","then","response","data","catch","error","onSetName","name","number","reset","className","style","form","onSubmit","e","preventDefault","marginBottom","value","type","pattern","title","placeholder","required","onInput","labelPhone","button","getFilteredContacts","contacts","filter","toLowerCase","includes","trim","ContactList","deleteContact","onContactFetch","contactsArr","useEffect","list","map","id","onClick","phonebookContacts","phonebookFilter","delete","get","onSetFilter","target","initilState","App","useState","setState","prev","JSON","parse","localStorage","getItem","app","createReducer","payload","_","loading","rootReducer","combineReducers","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","devTools","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6ccb50a5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"contactForm_button__axYp-\",\"labelPhone\":\"contactForm_labelPhone__2MmU7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"app_app__kYBq9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"contactList_list__397TD\"};","import { createAction } from '@reduxjs/toolkit';\r\n// import shortid from 'shortid';\r\n\r\n//ADD\r\n// export const addContact = createAction('phonebook/addContact', contact => ({\r\n//   payload: { ...contact, id: shortid.generate() },\r\n// }));\r\nexport const addContactRequest = createAction('phonebook/addContactRequest');\r\nexport const addContactSuccess = createAction('phonebook/addContactSuccess');\r\nexport const addContactError = createAction('phonebook/addContactError');\r\n\r\n//DELETE\r\n// export const deleteContact = createAction('phonebook/deleteContact');\r\nexport const deleteContactRequest = createAction(\r\n  'phonebook/deleteContactRequest',\r\n);\r\nexport const deleteContactSuccess = createAction(\r\n  'phonebook/deleteContactSuccess',\r\n);\r\nexport const deleteContactError = createAction('phonebook/deleteContactError');\r\n\r\n//GET\r\nexport const getContactRequest = createAction('phonebook/getContactRequest');\r\nexport const getContactSuccess = createAction('phonebook/getContactSuccess');\r\nexport const getContactError = createAction('phonebook/getContactError');\r\n\r\n//FILTER\r\nexport const filterContact = createAction('phonebook/filterContact');\r\n","import {\r\n  addContactError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  deleteContactError,\r\n  deleteContactSuccess,\r\n  deleteContactRequest,\r\n  getContactError,\r\n  getContactRequest,\r\n  getContactSuccess,\r\n} from './phonebook-actions';\r\n\r\nimport axios from 'axios';\r\n\r\naxios.defaults.baseURL = 'http://localhost:4040/';\r\n\r\nexport const addContact = contact => dispatch => {\r\n  dispatch(addContactRequest());\r\n  axios\r\n    .post('contacts', contact)\r\n    .then(response => dispatch(addContactSuccess(response.data)))\r\n    .catch(error => dispatch(addContactError(error)));\r\n};\r\n\r\nexport const deleteContact = id => dispatch => {\r\n  dispatch(deleteContactRequest());\r\n  axios\r\n    .delete('contacts/' + id)\r\n    .then(() => dispatch(deleteContactSuccess(id)))\r\n    .catch(error => dispatch(deleteContactError(error)));\r\n};\r\n\r\nexport const contactFetch = () => dispatch => {\r\n  dispatch(getContactRequest());\r\n  axios\r\n    .get('contacts')\r\n    .then(response => dispatch(getContactSuccess(response.data)))\r\n    .catch(error => dispatch(getContactError(error)));\r\n};\r\n","import React from 'react'; //при закоментированом варианте нужно сюда дописать { Component }\r\nimport style from '../ContactForm/contactForm.module.css';\r\nimport { connect } from 'react-redux';\r\nimport { addContact } from '../../redux/phoneBook/phonebook-operations';\r\n\r\nconst ContactForm = ({\r\n  onSetName,\r\n  // onAddContact,\r\n  name,\r\n  number,\r\n  addContact,\r\n  reset,\r\n}) => {\r\n  const handleAddContact = e => {\r\n    e.preventDefault();\r\n    const contact = {\r\n      name,\r\n      number,\r\n    };\r\n    addContact(contact);\r\n    reset();\r\n  };\r\n\r\n  return (\r\n    <form className={style.form} onSubmit={handleAddContact}>\r\n      <label style={{ marginBottom: '10px' }}>\r\n        Name\r\n        <input\r\n          value={name}\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          placeholder=\"Enter contact name\"\r\n          required\r\n          onInput={onSetName}\r\n          // onChange={options.handleChange}\r\n        />\r\n      </label>\r\n      <label className={style.labelPhone}>\r\n        Phone\r\n        <input\r\n          value={number}\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          placeholder=\"Enter contact phone\"\r\n          required\r\n          onInput={onSetName}\r\n          // onChange={options.handleChange}\r\n        />\r\n      </label>\r\n      <button type=\"submit\" className={style.button}>\r\n        Отправить\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => state;\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    addContact: contact => dispatch(addContact(contact)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n\r\n// import shortid from 'shortid';\r\n\r\n// class ContactForm extends Component {\r\n//   state = {\r\n//     name: '',\r\n//     tel: '',\r\n//   };\r\n//   nameInputId = shortid.generate();\r\n//   telInputId = shortid.generate();\r\n\r\n//   handleChange = event => {\r\n//     const { name, value } = event.currentTarget;\r\n//     this.setState({ [name]: value });\r\n//   };\r\n\r\n//   handleSubmit = event => {\r\n//     event.preventDefault();\r\n//     this.props.onSubmit(this.state);\r\n//     this.reset();\r\n//   };\r\n\r\n//   // formSubmitHandler = data => {\r\n//   //   console.log(data);\r\n//   // };\r\n\r\n//   reset = () => {\r\n//     this.setState({ name: '', tel: '' });\r\n//   };\r\n\r\n//   render() {\r\n//     return (\r\n//       <form onSubmit={this.handleSubmit} style={{ display: 'grid' }}>\r\n//         <label htmlFor={this.nameInputId} style={{ marginBottom: '10px' }}>\r\n//           Name\r\n//           <input\r\n//             value={this.state.name}\r\n//             type=\"text\"\r\n//             name=\"name\"\r\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n//             title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n//             placeholder=\"Enter contact name\"\r\n//             required\r\n//             onChange={this.handleChange}\r\n//             id={this.nameInputId}\r\n//           />\r\n//         </label>\r\n//         <label htmlFor={this.telInputId}>\r\n//           Phone\r\n//           <input\r\n//             value={this.state.tel}\r\n//             type=\"tel\"\r\n//             name=\"tel\"\r\n//             pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n//             title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n//             placeholder=\"Enter contact phone\"\r\n//             required\r\n//             onChange={this.handleChange}\r\n//             id={this.telInputId}\r\n//           />\r\n//         </label>\r\n//         <button type=\"submit\" style={{ width: '300px' }}>\r\n//           Add contact\r\n//         </button>\r\n//       </form>\r\n//     );\r\n//   }\r\n// }\r\n","function getFilteredContacts(contacts, filter) {\r\n  return contacts.filter(({ name }) =>\r\n    name.toLowerCase().includes(filter.toLowerCase().trim()),\r\n  );\r\n}\r\n\r\nexport default getFilteredContacts;\r\n","import { useEffect } from 'react';\r\nimport style from '../ContactList/contactList.module.css';\r\nimport getFilteredContacts from '../../helpers/filterContacts';\r\n\r\nconst ContactList = ({ contacts, deleteContact, filter, onContactFetch }) => {\r\n  const contactsArr = getFilteredContacts(contacts, filter);\r\n  useEffect(() => {\r\n    onContactFetch();\r\n  }, [onContactFetch]);\r\n  return (\r\n    <div>\r\n      <h2>Contacts</h2>\r\n      <ul className={style.list}>\r\n        {contactsArr.map(({ name, number, id }) => (\r\n          <li key={id}>\r\n            <p>Name:{name}</p>\r\n            <p>Number:{number}</p>\r\n            <button id={id} onClick={() => deleteContact(id)}>\r\n              Delete\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContactList;\r\n","import { connect } from 'react-redux';\r\nimport {\r\n  deleteContact,\r\n  contactFetch,\r\n} from '../../redux/phoneBook/phonebook-operations';\r\nimport ContactList from './ContactList';\r\nconst mapStateToProps = state => ({\r\n  contacts: state.phonebookContacts,\r\n  filter: state.phonebookFilter,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    deleteContact: id => dispatch(deleteContact(id)),\r\n    onContactFetch: () => dispatch(contactFetch()),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n// import style from '../ContactFilter/contactFilter.module.css';\r\nimport { filterContact } from '../../redux/phoneBook/phonebook-actions';\r\n\r\nconst ContactFilter = ({ onSetFilter, filter }) => (\r\n  <>\r\n    <label>\r\n      <p>Search for contacts</p>\r\n      <input onInput={onSetFilter} type=\"text\" name=\"filter\" value={filter} />\r\n    </label>\r\n  </>\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  filter: state.phonebookFilter,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSetFilter: ({ target: { value } }) => dispatch(filterContact(value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactFilter);\r\n","import React from 'react'; //при закоментированом варианте нужно сюда дописать { Component }\r\nimport { useState, useEffect } from 'react';\r\nimport style from './app.module.css';\r\n\r\n//libraries\r\n// import shortid from 'shortid';\r\n\r\n//helpers\r\n// import getFilteredContacts from '../../helpers/filterContacts';\r\n\r\n//Components\r\nimport ContactForm from '../ContactForm/ContactForm';\r\nimport ContactList from '../ContactList/ContactList.container';\r\nimport ContactFilter from '../ContactFilter/ContactFilter';\r\n\r\nconst initilState = {\r\n  name: '',\r\n  number: '',\r\n};\r\n\r\nfunction App() {\r\n  const [state, setState] = useState(initilState);\r\n\r\n  useEffect(() => {\r\n    setState(prev => ({\r\n      ...prev,\r\n      contacts:\r\n        JSON.parse(localStorage.getItem('contacts')) !== null\r\n          ? JSON.parse(localStorage.getItem('contacts'))\r\n          : [],\r\n    }));\r\n  }, []);\r\n\r\n  //Метод, который в State записывает введенные name і number\r\n  const handleSetName = ({ target: { name, value } }) => {\r\n    setState(prev => ({\r\n      ...prev,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n  //Добавляем контакт в наш массив контактов\r\n  // const handleAddContact = e => {\r\n  //   e.preventDefault();\r\n  //   const contact = {\r\n  //     name: state.name,\r\n  //     number: state.number,\r\n  //     id: shortid.generate(),\r\n  //   };\r\n  //   if (state.contacts.map(el => el.name).includes(state.name)) {\r\n  //     alert('Остановись, контакт с таким именем уже существует');\r\n  //     return;\r\n  //   }\r\n  //   localStorage.setItem(\r\n  //     'contacts',\r\n  //     JSON.stringify([...state.contacts, contact]),\r\n  //   );\r\n  //   setState(prev => ({\r\n  //     ...prev,\r\n  //     contacts: [...prev.contacts, contact],\r\n  //     name: '',\r\n  //     number: '',\r\n  //   }));\r\n  // };\r\n\r\n  const handleReset = () => {\r\n    setState({\r\n      name: '',\r\n      number: '',\r\n    });\r\n  };\r\n\r\n  //Удаляем контакт из ContactList\r\n  // const handleDeleteContact = ({ target: { id } }) => {\r\n  //   setState(prev => ({\r\n  //     ...prev,\r\n  //     contacts: state.contacts.filter(el => el.id !== id),\r\n  //   }));\r\n  //   localStorage.setItem(\r\n  //     'contacts',\r\n  //     JSON.stringify(state.contacts.filter(el => el.id !== id)),\r\n  //   );\r\n  // };\r\n\r\n  //Делаем фильтр контактов\r\n  // const contacts = getFilteredContacts(state.contacts, state.filter);\r\n\r\n  return (\r\n    <div className={style.app}>\r\n      <h1>Phonebook</h1>\r\n      <ContactForm\r\n        onSetName={handleSetName}\r\n        reset={handleReset}\r\n        name={state.name}\r\n        number={state.number}\r\n        // onAddContact={handleAddContact}\r\n        // onSubmit={this.formSubmit}\r\n        // input={this.state}\r\n        // options={this}\r\n        // optionsTel={this.handleTelChange}\r\n      />\r\n      {/* {state.contacts.length > 1 && <ContactFilter />} */}\r\n      <ContactFilter />\r\n      <ContactList />\r\n    </div>\r\n  );\r\n}\r\n\r\n// Первый вариант\r\n// class App extends Component {\r\n//   state = {\r\n//     inputValue: '',\r\n//     name: '',\r\n//     tel: '',\r\n//   };\r\n\r\n//   // handleChange = event => {\r\n//   //   const { name, value } = event.currentTarget;\r\n//   //   this.setState({ [name]: value });\r\n//   // };\r\n\r\n//   // handleSubmit = event => {\r\n//   //   event.preventDefault();\r\n//   //   console.log(this.state);\r\n//   // };\r\n\r\n//   formSubmit = event => {\r\n//     console.log(event);\r\n//   };\r\n\r\n//   render() {\r\n//     return (\r\n//       <>\r\n//         <h1>Phonebook</h1>\r\n//         <ContactForm\r\n//           onSubmit={this.formSubmit}\r\n//           // input={this.state}\r\n//           // options={this}\r\n//           // optionsTel={this.handleTelChange}\r\n//         />\r\n//         <h2>Contacts</h2>\r\n//         {/* <Filter ... /> */}\r\n//         {/* <ContactList ... /> */}\r\n//       </>\r\n//     );\r\n//   }\r\n// }\r\n\r\nexport default App;\r\n","import { createReducer, combineReducers } from '@reduxjs/toolkit';\r\nimport {\r\n  addContactError,\r\n  addContactSuccess,\r\n  addContactRequest,\r\n  deleteContactError,\r\n  deleteContactSuccess,\r\n  deleteContactRequest,\r\n  getContactSuccess,\r\n  getContactRequest,\r\n  getContactError,\r\n  filterContact,\r\n} from './phonebook-actions';\r\n\r\nconst phonebookContacts = createReducer([], {\r\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\r\n  [deleteContactSuccess]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n  [getContactSuccess]: (_, { payload }) => payload,\r\n});\r\n\r\nconst phonebookFilter = createReducer('', {\r\n  [filterContact]: (_, { payload }) => payload,\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [addContactRequest]: () => true,\r\n  [addContactError]: () => false,\r\n  [addContactSuccess]: () => false,\r\n  [deleteContactRequest]: () => true,\r\n  [deleteContactError]: () => false,\r\n  [deleteContactSuccess]: () => false,\r\n  [getContactRequest]: () => true,\r\n  [getContactError]: () => false,\r\n  [getContactSuccess]: () => false,\r\n});\r\n\r\nexport const rootReducer = combineReducers({\r\n  phonebookContacts,\r\n  phonebookFilter,\r\n  loading,\r\n});\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport { rootReducer } from './phoneBook/phonebook-reducer';\r\nimport logger from 'redux-logger';\r\nimport {\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\n// import storage from 'redux-persist/lib/storage';\r\n\r\n// const persistConfig = {\r\n//   key: 'contacts',\r\n//   storage,\r\n//   blacklist: ['phonebookFilter'],\r\n// };\r\n\r\nexport const store = configureStore({\r\n  reducer: rootReducer,\r\n  middleware: [\r\n    ...getDefaultMiddleware({\r\n      serializableCheck: {\r\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n      },\r\n    }),\r\n    logger,\r\n  ],\r\n  devTools: true,\r\n});\r\n\r\n// const persistor = persistStore(store);\r\n// export const configs = { store, persistor };\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport 'modern-normalize/modern-normalize.css';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\n// import { PersistGate } from 'redux-persist/integration/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={configs.persistor}> */}\n      <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}